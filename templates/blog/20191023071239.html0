<h2>昔CGIで掲示板を作った方へ。CGIに代わるPerl現代的Web開発手法のまとめ</h2>

Twitterのタイムライン眺めていると、昔Perl/CGIで掲示板を作ったなぁ、改造したなぁという方が結構な数でいらっしゃいます。

ところで、今のPerlのWeb開発って、どうなっているのという方のために、キーワードを検索すれば調べられるように案内を作成します。

CGIで作成されているWebアプリケーションを、開発効率とパフォーマンスが高い現代的Web開発手法に変更するために、どのような知識が必要なのかということがわかるようにします。

<h3>Unix/Linux環境</h3>

CGIといれば共有レンタルサーバーを借りますが、開発効率とパフォーマンスが高い現代的Web開発手法は、自分専用のUnix/Linuxサーバー上に構築します。

Linuxは無料で利用できるので、始めやすいでしょう。無料で利用できる代表的なLinuxについて、五十音順で紹介します。

<ul>
  <li>CentOS</li>
  <li>Debian</li>
  <li>Fedora</li>
  <li>RedHat</li>
  <li>Ubuntu</li>
</ul>

これらの環境は、VPSサービスやクラウドサービスを契約することによって利用することができます。

<ul>
  <li>AWL</li>
  <li>Microsoft Azure</li>
  <li>さくらのクラウド</li>
  <li>さくらのVPS</li>
</ul>

さくらのVPSは、月額698円から始めることができます。

また、現在は、WindowsでLinux環境を疑似体験できる方法があります。つまり、Windowsしか持っていなくっても、ローカル環境で、PerlのWeb開発の環境構築ができるのです。方法を五十音順で紹介します。

<ul>
  <li><a href="https://perlzemi.com/blog/20180806153350.html">msys2</a></li>
  <li>Cygwin</li>
  <li>Windows Subsystem for Linux</li>
</ul>

msys2は、環境構築の手順が少なく簡単で、動作が軽いので、お勧めしています。Windowsしか持っていない、Linuxを体験してみたいという方は、msys2で入門してみましょう。

<h3>リモート環境への接続とファイル更新</h3>

本番環境や開発環境がリモートにある場合は、いったいどうやって接続して、ファイルを更新するのでしょうか?

Windowsでは、そのためのツールがあります。以下のSSH接続できるツールを使うと、リモートサーバでコマンドを送信することができます。

<ul>
  <li>Putty</li>
  <li>TeraTerm</li>
</ul>

Mac OSの場合は、sshコマンドなどが使えるでしょう。

リモードサーバーでの、ファイルの更新はどうするのでしょうか?

以下のツールが使えます。

<ul>
  <li>WinSCP</li>
</ul>

Mac OSの場合は、sshで接続語、vimエディタを使えるでしょう。

<h3>Perlのインストール</h3>

CGIの場合は、デフォルトでインストールされているPerlを使いましたが、現代的Web開発手法では、Perlを自分でインストールします。

Linux環境に、その環境ローカルで使えるPerlをインストールします。

このためのツールを五十音順で紹介します。

<ul>
  <li><a href="https://perlzemi.com/blog/20110220130464.html">perlbrew</a></li>
  <li><a href="https://perlzemi.com/blog/20180816153437.html">plenv</a></li>
</ul>

<h3>CPANモジュールインストール</h3>

CGIでは、デフォルトでレンタルサーバーにインストールされているPerlモジュールを使うことが主流でした。

開発環境や本番環境へのCPANモジュールのインストールは、必要なモジュールをcpanfileに定義して、cpanmというコマンドを使うと、自動的に配置できます。

<ul>
  <li>cpanm</li>
  <li>cpanfile</li>
</ul>

perlbrewやplenvのオプションとしてcpanmをインストールするコマンドが存在するので、それを利用するのが簡単です。

<h3>PerlのWebフレームワーク</h3>

CGIでは、cgi-lib.pl、CGI.pmなどを使って、掲示板を作ったり、Web開発を行っていたと思います。CGI自体は、ひとつの動的なWebを実現する技術ですが、パフォーマンスと開発効率の面で、課題を抱えていました。

現代的なPerlのWebフレームワークは、パフォーマンスと開発効率を改善しています。

PerlのWebフレームワークを五十音順で紹介します。

<ul>
  <li>
    Amon2
  </li>
  <li>
    Catalyst
  </li>
  <li>
    Dancer2
  </li>
  <li>
    Mojolicious
  </li>
  <li>
    Plack/PSGI(Webミドルウェア)
  </li>
</ul>

Amon2, Catalyst, Dancer2, Mojoliciousは、PerlのWebフレームワークです。

Plack/PSGIは、Webミドルウェアで、WebサーバーとWebアプリケーションがコミュニケーションをするための共通仕様を提供します。

詳細は、記述しませんが、検索すれば、たくさんの情報を得ることができると思います。

CGIの課題を解決するためにPHPが利用されることは多いですが、Perl自体もCGIの課題を解決するために独自の手法を発展させてきました。

<h3>PerlのWebサーバー(アプリケーションサーバー)</h3>

PerlのWebサーバーとは、Perl製のHTTPサーバーで、一般的には、ApacheやNginxの後ろにリバースプロキシ構成で配置して利用するものです。

<ul>
  <li>Mojolicious::Server::Hypnotoad</li>
  <li>Starman</li>
  <li>Starlet</li>
  <li>Server::Starter</li>
</ul>

Starman,Starlet,Mojolicious::Server::Hypnotoadは、PerlのWebサーバーです。Server::Starterは、StarmanやStarletをホットデプロイメントするために利用されます。Mojolicious::Server::Hypnotoadには、ホットデプロイメント機能が付いています。

<h3>文字コードはUTF-8</h3>

CGIのWebアプリは、文字コードがShift_JISやeuc-jpで合ったりしました。使用されるモジュールも、jcode.pl、JCode.pmが使われていました。現代的PerlWeb開発では、文字コードはUTF-8を使用し、文字コードに関するモジュールは、Encodeモジュールとutf8モジュールを使用します。

<ul>
  <li><a href="https://perlzemi.com/blog/20091118124667.html">Encodeモジュールとutf8モジュール</a></li>
</ul>

もし過去にCGIで作ったWebアプリケーションを、現代的Perl Web開発に置き換えるときは、Encodeモジュールとutf8モジュールに置き換えていくようにしましょう。

<h3>本番環境</h3>

CGIの場合は、CGIスクリプトを共有レンタルサーバーに配置していましたが、現代的Web開発手法では、クラウドサービスかVPSサービスを借りて、配置することになります。

<ul>
  <li>AWS</li>
  <li>Microsoft Azure</li>
  <li>さくらのクラウド</li>
  <li>さくらのVPS</li>
</ul>

さくらのVPSは、月額698円で、本物のLinux環境を利用できます。個人で始める方は、こちらが、低額で、お安くて便利です。

企業が、本番環境に配置する場合は、半固定料金か、従量制課金のクラウドを使うことが多いかと思います。

CGIの時代は、FTPでファイルをアップロードしていましたが、現代的Web開発手法では、Githubというサービスとgitというツールを使うのが簡単です。昔は手動でFTPでファイルを上げていましたが、gitを使うと、すべてのファイルをひとつのコマンドで、配置することができます。

<ul>
  <li>Github</li>
  <li>git</li>
</ul>

<h3>Webサーバー</h3>

CGIでは、ファイルを配置するだけで完了しましたが、現代的Web開発手法では、Webサーバーを使って、リバースプロキシの設定をして、アプリケーションサーバーに接続します。

よく利用されるWebサーバーは、ApacheかNginxです。

Webサーバーのインストールは、「Linux名 Webサーバー名 インストール」で検索しましょう。

<ul>
  <li>
    Apache
  </li>
  <li>
    Nginx
  </li>
</ul>

リバースプロキシという機能を使って、WebサーバーとWebアプリを接続する方法については、「Apache リバースプロキシ」「Nginx リバースプロキシ」で、検索してみましょう。

<h3>データベース</h3>

CGIの場合は、データをファイルに保存することが多かったのですが、現代的Web開発手法では、データをデータベースに保存します。

Webアプリでよく使われるデータベースです。

<ul>
  <li>MySQL</li>
  <li>MariaDB</li>
  <li>PostgreSQL</li>
</ul>

インストールは、「Linux名 データベース名 インストール」で検索しましょう。

MySQLとMariaDBは、まぁ同じようなものです。Perlからデータベース接続する場合はDBIとDBD::mysqlが必要です。

PostgreSQLに接続するためにはDBIとDBD::Pgが必要です。

<h3>データベースへの接続管理とO/Rマッパー</h3>

CGIの時代は、レンタルサーバーにインストールされているDBIを使って、データベースに接続していましたが、現代的Web開発手法では、データベースのテーブルにアクセスする便利なモジュールを、インストールします。

データベースへの接続は、接続管理維持や、joinを簡単に使いたいなどの要望がでてきますね。そういう場合のために、いくつかのO/Rマッパーを紹介しておきましょう。五十音順です。

<ul>
  <li>Aniki</li>
  <li>DBIx::Class</li>
  <li>DBIx::Connector</li>
  <li>DBIx::Custom</li>
  <li>DBIx::Handler</li>
  <li>DBIx::Simple</li>
  <li>SQL::Maker</li>
  <li>Teng</li>
</ul>

DBIx::ConnectorとDBIx::Handlerは接続管理だけをやってくれるモジュールです。それ以外は、さらに、接続管理モジュールをラッピングしていて、O/Rマッパー機能を提供します。SQLのように使える抽象度の低いものから、データベースアクセスをメソッドにして抽象度の高いものまでがそろっています。

<h3>ドメインの取得</h3>

CGIの場合は、デフォルトでひとつのURLをもらえていましたが、現代的Web開発で、Webサイトを公開するには、ドメインを取得する必要があります。

ドメイン取得サービスで、ドメインを取得しましょう。

<ul>
  <li>お名前.com</li>
  <li>ムームードメイン</li>
</ul>

ドメインの設定は、ドメインサービスで、ドメインとIPアドレスの対応を記述した上で、ApacheやNginxなどのWebサーバーの設定ファイルに記述する必要があります。Apacheの場合は、バーチャルホストで検索してください。

<h3>SSLを使いたい</h3>

Let's Encryptというサービスを使うと、無料でSSL証明書を発行することができます。

<ul>
  <li>Let's Encrypt</li>
</ul>

<h3>テキストエディタ</h3>

テキストエディタは、お好みで。愛着のあるもの、そのままお使いいただけます。

<h3>まとめ</h3>

PerlのWeb開発の手法は、一度覚えてしまえば、非常に応用が利く技術です。Web技術は、ひとつひとつの難易度は高くないのですが、構成要素が、多く継続的な学習がまさに必要になる分野だと思います。

CGIの次に、現代的なWeb開発の手法を知りたいという方は、ぜひ参考にしてみてください。

今システムがCGIで動いていて、現代的なPerlのWeb開発手法に移行したいという開発マネージャーの方もぜひ参考にしてください。

CGIの課題解決としてPHPが開発されましたが、Perl自体もCGIの課題解決のために独自の発展を遂げています。
